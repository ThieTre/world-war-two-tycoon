local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Modules = ReplicatedStorage.Modules

local LiveConfig = require(Modules.Mega.Data.LiveConfig)
local InstModify = require(Modules.Mega.Instances.Modify)
local InstPhysics = require(Modules.Mega.Instances.Physics)

local SETTINGS = require(ReplicatedStorage.Settings.Objects.Props)

-----------------------------------------------------------
------------------------ Server Prop ----------------------
-----------------------------------------------------------

local ServerProp = {}
ServerProp.__index = ServerProp
export type ServerProp = typeof(setmetatable({}, ServerProp))

function ServerProp:new(model: Model): ServerProp
	self = self ~= ServerProp and self or setmetatable({}, ServerProp)
	self.model = model
	self.config = LiveConfig:new(model)
	self.mass = self:_GetMass()
	self.base = self:_GetBase()
	self:_Setup()
end

function ServerProp:_GetBase()
	-- Attempt to find existing
	local base = self.model:FindFirstChild("Base")
	if base then
		return base
	end

	-- Create new
	local base = InstModify.create("Part", self.model, {
		Size = self.model:GetExtentsSize(),
		CFrame = self.model:GetPivot(),
		Anchored = true,
		CanCollide = false,
		CanQuery = false,
		Name = "Base",
		Transparency = 1,
	})
	InstPhysics.setMass(base, 0)
	base:SetAttribute("_IsAutoGenerated", true)
	return base
end

function ServerProp:_Setup()
	self:_SetupModel()
	self:_SetupHealth()
	self:_SetupEffects()
end

function ServerProp:_SetupModel()
	self.model:SetAttribute("IgnoreDamageEffects", true)
end

function ServerProp:_SetupEffects()
	-- Material sounds
	local material = "Wood"
	if self.base.Transparency ~= 1 then
		material = self.base.Material.Name
	else
		for _, part in self.model:GetChildren() do
			if not part:IsA("BasePart") then
				continue
			end
			local partMaterial = part.Material.Name
			if SETTINGS.Effects.Sounds:FindFirstChild(partMaterial) then
				material = partMaterial
				break
			end
		end
	end
	local sounds = SETTINGS.Effects.Sounds[material]
	InstModify.cloneMany(sounds:GetChildren(), self.base)

	-- Particle effects
	local size = SETTINGS.getSizeCategory(self.model)
	local particles = SETTINGS.Effects.Particles[size]:GetChildren()
	for _, particle in particles do
		local clone = particle:Clone()
		clone:SetAttribute("Group", "Break")
		clone.Parent = self.base
	end
end

function ServerProp:_GetMass()
	local mass = 0
	for _, part in self.model:GetDescendants() do
		if not part:IsA("BasePart") then
			continue
		end
		if part.Transparency == 1 then
			continue
		end
		mass += part.Mass
	end
	return mass
end

function ServerProp:_SetupHealth()
	self.model:AddTag("Damageable")
	local maxHealth =
		math.clamp(SETTINGS.HealthConstant * self.mass, 0, SETTINGS.MaxHealth)
	self.config.Health = maxHealth

	self.config:Watch("Health", function(new, prev)
		if new - prev > 0 then
			return
		end
		if new > 0 then
			return
		end
		self.model:RemoveTag("Damageable")
		task.wait(SETTINGS.RespawnTime)
		self.config.Health = maxHealth
		self.model:AddTag("Damageable")
	end)
end

return ServerProp
